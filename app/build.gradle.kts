/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application

    // The official JavaFX plugin, which handles the complexities of using JavaFX.
    id("org.openjfx.javafxplugin") version "0.1.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter.api)

    testRuntimeOnly(libs.junit.jupiter.egine)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    implementation(libs.gson)
    // Add all the JavaFX libraries using the "bundle" we created.
    implementation(libs.bundles.javafx)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "trabalho.App"
}

javafx {
    // Use the version we defined in libs.versions.toml
    version = libs.versions.javafx.get()
    // Specify which JavaFX modules your application needs.
    // 'javafx.controls' is for buttons, lists, etc.
    // 'javafx.fxml' is for loading user interfaces from FXML files.
    modules = listOf("javafx.controls", "javafx.fxml")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
